generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  username              String
  email                 String
  passwordHash          String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  preferences           Json?
  favoriteRecipes       FavoriteRecipe[]
  ratings               Rating[]
  recipes               Recipe[]
  shoppingLists         ShoppingList[]
  userRecipePreferences UserRecipePreference[]
}

model Recipe {
  id              Int                @id @default(autoincrement())
  title           String
  description     String
  instructions    String
  cookingTime     Int
  servings        Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  authorId        Int
  author          User               @relation(fields: [authorId], references: [id])
  accompaniments  Accompaniment[]
  favoriteRecipes FavoriteRecipe[]
  ratings         Rating[]
  ingredients     RecipeIngredient[]
  tags            RecipeTag[]
  shoppingLists   ShoppingList[]
}

model Ingredient {
  id      Int                @id @default(autoincrement())
  name    String
  type    String
  recipes RecipeIngredient[]
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float
  unit         String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model FavoriteRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Accompaniment {
  id          Int    @id @default(autoincrement())
  recipeId    Int
  type        String
  description String
  recipe      Recipe @relation(fields: [recipeId], references: [id])
}

model ShoppingList {
  id       Int    @id @default(autoincrement())
  recipeId Int
  userId   Int?
  items    Json
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  user     User?  @relation(fields: [userId], references: [id])
}

model Tag {
  id      Int         @id @default(autoincrement())
  name    String      @unique
  recipes RecipeTag[]
}

model RecipeTag {
  id       Int    @id @default(autoincrement())
  recipeId Int
  tagId    Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
}

model UserRecipePreference {
  id         Int    @id @default(autoincrement())
  userId     Int
  preference String
  user       User   @relation(fields: [userId], references: [id])
}
